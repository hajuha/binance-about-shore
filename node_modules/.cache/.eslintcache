[{"/home/kev/Data/project/binance-about-shore/src/index.js":"1","/home/kev/Data/project/binance-about-shore/src/reportWebVitals.js":"2","/home/kev/Data/project/binance-about-shore/src/homepage.js":"3","/home/kev/Data/project/binance-about-shore/src/utils/binance.js":"4"},{"size":514,"mtime":1619556798938,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1619540474833,"results":"7","hashOfConfig":"6"},{"size":3925,"mtime":1619561584464,"results":"8","hashOfConfig":"6"},{"size":679,"mtime":1619560943714,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4t7hf5",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/kev/Data/project/binance-about-shore/src/index.js",[],"/home/kev/Data/project/binance-about-shore/src/reportWebVitals.js",[],"/home/kev/Data/project/binance-about-shore/src/homepage.js",["20","21","22","23"],"import './style/app.scss';\nimport 'antd/dist/antd.css';\nimport { Button, Select, Space, Table, Tabs } from 'antd';\nimport binanceAPI from './utils/binance';\nimport { useEffect, useState } from 'react';\nconst { Option } = Select;\n\nconst dataSource = [\n    {\n        volume: 7148,\n        entryPrice: 0.001436,\n        symbol: 'WINUSDT',\n        currentPrice: 0,\n        pnl: 0,\n    },\n    {\n        volume: 0.0538,\n        entryPrice: 568.3,\n        symbol: 'BNBUSDT',\n        currentPrice: 0,\n        pnl: 0,\n    },\n];\n\nconst Home = () => {\n    const [symbols, setSymbols] = useState([]);\n    const [data, setData] = useState(dataSource);\n    const [total, setTotal] = useState();\n\n    useEffect(() => {\n        getSymbols();\n    }, []);\n\n    useEffect(() => {\n        var interval = setInterval(async () => {\n            let _data = data.slice();\n            var total = 0;\n\n            const new_data = await Promise.all(\n                _data.map(async (item) => {\n                    const price = await getPrice(item.symbol);\n\n                    const pnl = profitCalculate(\n                        item.volume,\n                        item.entryPrice,\n                        price\n                    );\n\n                    total += profitCalculate(item.volume, 0, price);\n\n                    return {\n                        ...item,\n                        currentPrice: price,\n                        pnl: pnl,\n                    };\n                })\n            );\n\n            console.log(new_data);\n            setTotal(total);\n            setData(new_data);\n        }, 1000);\n    }, []);\n\n    const getSymbols = async () => {\n        const _symbols = await binanceAPI.getSymbols();\n\n        setSymbols(_symbols);\n    };\n\n    const getPrice = (symbol) => {\n        const price = binanceAPI.getPrice(symbol);\n\n        return price;\n    };\n\n    const profitCalculate = (volume, entryPrice, currentPrice) => {\n        return (volume * (currentPrice - entryPrice) * 99.9) / 100;\n    };\n\n    const columns = [\n        {\n            title: 'Pairs',\n            dataIndex: 'symbol',\n            key: 'symbol',\n        },\n        {\n            title: 'Volume',\n            dataIndex: 'volume',\n            key: 'volume',\n            sorter: (a, b) => a.volume - b.volume,\n        },\n        {\n            title: 'Entry price',\n            dataIndex: 'entryPrice',\n            key: 'entryPrice',\n            render: (pnl) => (\n                <>{(Math.round(pnl * 1000) / 1000).toFixed(3)} $</>\n            ),\n        },\n\n        {\n            title: 'Current price',\n            dataIndex: 'currentPrice',\n            key: 'currentPrice',\n            render: (pnl) => (\n                <>{(Math.round(pnl * 1000) / 1000).toFixed(3)} $</>\n            ),\n        },\n        {\n            title: 'PNL',\n            dataIndex: 'pnl',\n            key: 'pnl',\n            render: (pnl) => <>{(Math.round(pnl * 100) / 100).toFixed(2)} $</>,\n        },\n    ];\n    return (\n        <div className='home-page'>\n            <Button>\n                {(Math.round((total + 0.03) * 100) / 100).toFixed(2)} $\n            </Button>\n            <div className='home-box'>\n                <Select\n                    showSearch\n                    optionFilterProp='children'\n                    filterOption={(input, option) =>\n                        option.props.children\n                            .toLowerCase()\n                            .indexOf(input.toLowerCase()) >= 0\n                    }>\n                    {symbols.map((symbol) => {\n                        return (\n                            <Option value={symbol} key={symbol}>\n                                {symbol}\n                            </Option>\n                        );\n                    })}\n                </Select>\n                <Table columns={columns} dataSource={data} />\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n","/home/kev/Data/project/binance-about-shore/src/utils/binance.js",["24"],"import axios from 'axios';\n\nexport default {\n    getSymbols: async () => {\n        const res = await axios({\n            method: 'GET',\n            url: 'https://api3.binance.com/api/v3/ticker/price',\n            headers: {},\n        });\n\n        var symbols = res.data.map((item) => {\n            return item.symbol;\n        });\n\n        return symbols;\n    },\n    getPrice: async (symbol) =>\n        await axios({\n            method: 'GET',\n            url: 'https://api3.binance.com/api/v3/ticker/price',\n            headers: {},\n            params: {\n                symbol: symbol,\n            },\n        }).then((res) => {\n            return res.data.price;\n        }),\n};\n",{"ruleId":"25","severity":1,"message":"26","line":3,"column":26,"nodeType":"27","messageId":"28","endLine":3,"endColumn":31},{"ruleId":"25","severity":1,"message":"29","line":3,"column":40,"nodeType":"27","messageId":"28","endLine":3,"endColumn":44},{"ruleId":"25","severity":1,"message":"30","line":35,"column":13,"nodeType":"27","messageId":"28","endLine":35,"endColumn":21},{"ruleId":"31","severity":1,"message":"32","line":63,"column":8,"nodeType":"33","endLine":63,"endColumn":10,"suggestions":"34"},{"ruleId":"35","severity":1,"message":"36","line":3,"column":1,"nodeType":"37","endLine":28,"endColumn":3},"no-unused-vars","'Space' is defined but never used.","Identifier","unusedVar","'Tabs' is defined but never used.","'interval' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["38"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"39","fix":"40"},"Update the dependencies array to be: [data]",{"range":"41","text":"42"},[1602,1604],"[data]"]