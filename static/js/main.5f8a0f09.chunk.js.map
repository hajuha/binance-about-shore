{"version":3,"sources":["utils/binance.js","homepage.js","reportWebVitals.js","index.js"],"names":["getSymbols","a","axios","method","url","headers","res","symbols","data","map","item","symbol","getPrice","params","then","price","Option","Select","dataSource","volume","entryPrice","currentPrice","pnl","Home","useState","setSymbols","setData","total","setTotal","useEffect","setInterval","_data","slice","Promise","all","profitCalculate","new_data","console","log","binanceAPI","_symbols","columns","title","dataIndex","key","sorter","b","render","Math","round","toFixed","className","showSearch","optionFilterProp","filterOption","input","option","props","children","toLowerCase","indexOf","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f8a0f09.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n    getSymbols: async () => {\n        const res = await axios({\n            method: 'GET',\n            url: 'https://api3.binance.com/api/v3/ticker/price',\n            headers: {},\n        });\n\n        var symbols = res.data.map((item) => {\n            return item.symbol;\n        });\n\n        return symbols;\n    },\n    getPrice: async (symbol) =>\n        await axios({\n            method: 'GET',\n            url: 'https://api3.binance.com/api/v3/ticker/price',\n            headers: {},\n            params: {\n                symbol: symbol,\n            },\n        }).then((res) => {\n            return res.data.price;\n        }),\n};\n","import './style/app.scss';\nimport 'antd/dist/antd.css';\nimport { Button, Select, Space, Table, Tabs } from 'antd';\nimport binanceAPI from './utils/binance';\nimport { useEffect, useState } from 'react';\nconst { Option } = Select;\n\nconst dataSource = [\n    {\n        volume: 7148,\n        entryPrice: 0.001436,\n        symbol: 'WINUSDT',\n        currentPrice: 0,\n        pnl: 0,\n    },\n    {\n        volume: 0.0538,\n        entryPrice: 568.3,\n        symbol: 'BNBUSDT',\n        currentPrice: 0,\n        pnl: 0,\n    },\n];\n\nconst Home = () => {\n    const [symbols, setSymbols] = useState([]);\n    const [data, setData] = useState(dataSource);\n    const [total, setTotal] = useState();\n\n    useEffect(() => {\n        getSymbols();\n    }, []);\n\n    useEffect(() => {\n        var interval = setInterval(async () => {\n            let _data = data.slice();\n            var total = 0;\n\n            const new_data = await Promise.all(\n                _data.map(async (item) => {\n                    const price = await getPrice(item.symbol);\n\n                    const pnl = profitCalculate(\n                        item.volume,\n                        item.entryPrice,\n                        price\n                    );\n\n                    total += profitCalculate(item.volume, 0, price);\n\n                    return {\n                        ...item,\n                        currentPrice: price,\n                        pnl: pnl,\n                    };\n                })\n            );\n\n            console.log(new_data);\n            setTotal(total);\n            setData(new_data);\n        }, 1000);\n    }, []);\n\n    const getSymbols = async () => {\n        const _symbols = await binanceAPI.getSymbols();\n\n        setSymbols(_symbols);\n    };\n\n    const getPrice = (symbol) => {\n        const price = binanceAPI.getPrice(symbol);\n\n        return price;\n    };\n\n    const profitCalculate = (volume, entryPrice, currentPrice) => {\n        return (volume * (currentPrice - entryPrice) * 99.9) / 100;\n    };\n\n    const columns = [\n        {\n            title: 'Pairs',\n            dataIndex: 'symbol',\n            key: 'symbol',\n        },\n        {\n            title: 'Volume',\n            dataIndex: 'volume',\n            key: 'volume',\n            sorter: (a, b) => a.volume - b.volume,\n        },\n        {\n            title: 'Entry price',\n            dataIndex: 'entryPrice',\n            key: 'entryPrice',\n            render: (pnl) => (\n                <>{(Math.round(pnl * 1000) / 1000).toFixed(3)} $</>\n            ),\n        },\n\n        {\n            title: 'Current price',\n            dataIndex: 'currentPrice',\n            key: 'currentPrice',\n            render: (pnl) => (\n                <>{(Math.round(pnl * 1000) / 1000).toFixed(3)} $</>\n            ),\n        },\n        {\n            title: 'PNL',\n            dataIndex: 'pnl',\n            key: 'pnl',\n            render: (pnl) => <>{(Math.round(pnl * 100) / 100).toFixed(2)} $</>,\n        },\n    ];\n    return (\n        <div className='home-page'>\n            <Button>\n                {(Math.round((total + 0.03) * 100) / 100).toFixed(2)} $\n            </Button>\n            <div className='home-box'>\n                <Select\n                    showSearch\n                    optionFilterProp='children'\n                    filterOption={(input, option) =>\n                        option.props.children\n                            .toLowerCase()\n                            .indexOf(input.toLowerCase()) >= 0\n                    }>\n                    {symbols.map((symbol) => {\n                        return (\n                            <Option value={symbol} key={symbol}>\n                                {symbol}\n                            </Option>\n                        );\n                    })}\n                </Select>\n                <Table columns={columns} dataSource={data} />\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport Home from './homepage';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}