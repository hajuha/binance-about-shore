{"version":3,"sources":["utils/binance.js","homepage.js","reportWebVitals.js","index.js"],"names":["getSymbols","a","axios","method","url","headers","res","symbols","data","map","item","symbol","getPrice","params","then","price","Option","Select","dataSource","JSON","parse","localStorage","getItem","Home","useState","setSymbols","setData","total","setTotal","useEffect","setInterval","_data","slice","Promise","all","pnl","profitCalculate","volume","entryPrice","currentPrice","new_data","binanceAPI","_symbols","parseInt","columns","title","dataIndex","key","sorter","b","render","Math","round","toFixed","className","name","initialValues","remember","onFinish","values","newOrder","push","setItem","stringify","window","location","reload","Item","label","showSearch","optionFilterProp","filterOption","input","option","props","children","toLowerCase","indexOf","value","type","htmlType","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88be0e47.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n    getSymbols: async () => {\n        const res = await axios({\n            method: 'GET',\n            url: 'https://api3.binance.com/api/v3/ticker/price',\n            headers: {},\n        });\n\n        var symbols = res.data.map((item) => {\n            return item.symbol;\n        });\n\n        return symbols;\n    },\n    getPrice: async (symbol) =>\n        await axios({\n            method: 'GET',\n            url: 'https://api3.binance.com/api/v3/ticker/price',\n            headers: {},\n            params: {\n                symbol: symbol,\n            },\n        }).then((res) => {\n            return res.data.price;\n        }),\n};\n","import './style/app.scss';\nimport 'antd/dist/antd.css';\nimport { Button, Input, Select, Space, Table, Form } from 'antd';\nimport binanceAPI from './utils/binance';\nimport { useEffect, useState } from 'react';\nconst { Option } = Select;\n\nconst dataSource = JSON.parse(localStorage.getItem('dataSource')) || [];\n\nconst Home = () => {\n    const [symbols, setSymbols] = useState([]);\n    const [data, setData] = useState(dataSource);\n    const [total, setTotal] = useState();\n\n    useEffect(() => {\n        getSymbols();\n    }, []);\n\n    useEffect(() => {\n        var interval = setInterval(async () => {\n            let _data = data.slice();\n            var total = 0;\n\n            const new_data = await Promise.all(\n                _data.map(async (item) => {\n                    const price = await getPrice(item.symbol);\n                    const pnl = profitCalculate(\n                        item.volume,\n                        item.entryPrice,\n                        price\n                    );\n\n                    total += pnl;\n\n                    return {\n                        ...item,\n                        currentPrice: price,\n                        pnl: pnl,\n                    };\n                })\n            );\n            setTotal(total);\n            setData(new_data);\n        }, 1000);\n    }, []);\n\n    const getSymbols = async () => {\n        const _symbols = await binanceAPI.getSymbols();\n\n        setSymbols(_symbols);\n    };\n\n    const getPrice = (symbol) => {\n        const price = binanceAPI.getPrice(symbol);\n\n        return price;\n    };\n\n    const profitCalculate = (volume, entryPrice, currentPrice) => {\n        return (volume * (parseInt(currentPrice) - entryPrice) * 99.9) / 100;\n    };\n\n    const columns = [\n        {\n            title: 'Pairs',\n            dataIndex: 'symbol',\n            key: 'symbol',\n        },\n        {\n            title: 'Volume',\n            dataIndex: 'volume',\n            key: 'volume',\n            sorter: (a, b) => a.volume - b.volume,\n        },\n        {\n            title: 'Entry price',\n            dataIndex: 'entryPrice',\n            key: 'entryPrice',\n            render: (pnl) => (\n                <>{(Math.round(pnl * 1000) / 1000).toFixed(3)} $</>\n            ),\n        },\n\n        {\n            title: 'Current price',\n            dataIndex: 'currentPrice',\n            key: 'currentPrice',\n            render: (pnl) => (\n                <>{(Math.round(pnl * 1000) / 1000).toFixed(3)} $</>\n            ),\n        },\n        {\n            title: 'PNL',\n            dataIndex: 'pnl',\n            key: 'pnl',\n            render: (pnl) => <>{(Math.round(pnl * 100) / 100).toFixed(2)} $</>,\n        },\n    ];\n\n    const onFinish = (values) => {\n        let _data = data;\n        const newOrder = {\n            volume: parseInt(values.volume),\n            entryPrice: parseInt(values.entryPrice),\n            symbol: values.symbol,\n            currentPrice: 0,\n            pnl: 0,\n        };\n\n        _data.push(newOrder);\n\n        localStorage.setItem('dataSource', JSON.stringify(_data));\n        window.location.reload();\n    };\n\n    return (\n        <div className='home-page'>\n            <Button>\n                {(Math.round(total * 100) / 100).toFixed(2)} $\n            </Button>\n            <div className='home-box'>\n                <Form\n                    name='basic'\n                    initialValues={{ remember: true }}\n                    onFinish={onFinish}\n                    className='add-order'>\n                    <Form.Item\n                        label='Volume'\n                        name='volume'\n                        className='input-field'>\n                        <Input />\n                    </Form.Item>\n\n                    <Form.Item\n                        label='Entry price'\n                        name='entryPrice'\n                        className='input-field'>\n                        <Input />\n                    </Form.Item>\n\n                    <Form.Item label='Pairs' name='symbol'>\n                        <Select\n                            showSearch\n                            optionFilterProp='children'\n                            filterOption={(input, option) =>\n                                option.props.children\n                                    .toLowerCase()\n                                    .indexOf(input.toLowerCase()) >= 0\n                            }>\n                            {symbols.map((symbol) => {\n                                return (\n                                    <Option value={symbol} key={symbol}>\n                                        {symbol}\n                                    </Option>\n                                );\n                            })}\n                        </Select>\n                    </Form.Item>\n\n                    <div className='buttons'>\n                        <Form.Item>\n                            <Button\n                                type='primary'\n                                htmlType='submit'\n                                className='submit'>\n                                Submit\n                            </Button>\n                        </Form.Item>\n                    </div>\n                </Form>\n\n                <Table columns={columns} dataSource={data} />\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport Home from './homepage';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}